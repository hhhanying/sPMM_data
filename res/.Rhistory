SST <- SSTR + SSE
SSTr <- n*sum((sampleMeans - mean(sampleMeans))^2)
SSTr
MSTR <- SSTr / dfTr
MSTR
SST <- SSTr + SSE
n <- 4 # observations per treatment
a <- length(sampleMeans)  # 5 recipes
N <- n*a  # total sample size
dfE <- N - a
dfTr <- a - 1
dfT <- N - 1
SSE <- dfE * MSE
SSTr <- n*sum((sampleMeans - mean(sampleMeans))^2)
SSTr
MSTR <- SSTr / dfTr
MSTR
SST <- SSTr + SSE
SST
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
SSTr <- n*sum((sampleMeans - mean(sampleMeans))^2)
MSTr <- SSTr / dfTr
SST <- SSTr + SSE
MST <- SST / dfT
SSTr; MSTr; SST; MST
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f = c('?', '', '')
p = c('?', '', '')
kable(noquote(cbind(source, ss, df,  ms, f, p)))
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f = c('?', '', '')
p = c('?', '', '')
kable(noquote(cbind(source, ss, df,  ms, f, p)))
source = c('factor', 'error', 'total')
df = c('?', '25', '29')
ss = c('?', '186.53', '1174.24')
ms = c('246.93', '?', '')
f = c('?', '', '')
p = c('?', '', '')
kable(noquote(cbind(source, df, ss, ms, f, p)))
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f = c('?', '', '')
p = c('?', '', '')
kable(cbind(source, ss, df,  ms, f, p))
kable(noquote(cbind(source, ss, df,  ms, f, p)))
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f = c('?', '', '')
p = c('?', '', '')
kable(data.frame(source, ss, df,  ms, f, p))
kable(noquote(cbind(source, ss, df,  ms, f, p)))
n <- 4 # observations per treatment
a <- length(sampleMeans)  # 5 recipes
N <- n*a  # total sample size
dfE <- N - a
dfTr <- a - 1
dfT <- N - 1
SSE <- dfE * MSE
dfE, dfTr, dfT, SSE
n <- 4 # observations per treatment
a <- length(sampleMeans)  # 5 recipes
N <- n*a  # total sample size
dfE <- N - a
dfTr <- a - 1
dfT <- N - 1
SSE <- dfE * MSE
c(dfE, dfTr, dfT, SSE)
m <- matrix(c("Source", "Treatment", "Error", "Total", "SS", SSTr, SSE, SST, "df", a-1, N-a, N-1, "MS", MSTr, MSE, NA, "f", f, NA, NA, "p-value", p, NA, NA), nrow=4)
kable(m)
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f = c(as.character(f), '', '')
p = c(as.character(p), '', '')
kable(data.frame(source, ss, df,  ms, f, p))
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f = c(as.character(f), '', '')
p = c(as.character(p), '', '')
kable(data.frame(source, ss, df,  ms))#, f, p))
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f = c(as.character(f), '', '')
p = c(as.character(p), '', '')
kable(data.frame(source, ss, df,  ms, f))#, p))
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f = c(as.character(f), '', '')
p = c(as.character(p), '', '')
kable(data.frame(source, ss, df,  ms, f))#, p))
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f = c(as.character(f), '', '')
p = c(as.character(p), '', '')
kable(data.frame(source, ss, df,  ms, f))#, p))
data.frame(source, ss, df,  ms, f)
ss
df
f
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f_ = c(as.character(f), '', '')
p_ = c(as.character(p), '', '')
aovtable = data.frame(source, ss, df,  ms, f_, p_)
kable(data.frame(source, ss, df,  ms, f_, p_))
f
f <- MSTr / MSE
p <- pf(f, df1 = a-1, df2 = N-a, lower.tail = F)
p <- round(p, 5)
f
p
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f_ = c(as.character(f), '', '')
p_ = c(as.character(p), '', '')
aovtable = data.frame(source, ss, df,  ms, f_, p_)
kable(data.frame(source, ss, df,  ms, f_, p_))
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f_ = c(as.character(f), '', '')
p_ = c(as.character(p), '', '')
aovtable = data.frame(source, ss, df,  ms, f_, p_)
kable(data.frame(source, ss, df,  ms, f_, p_))
source = c('Treatment', 'error', 'total')
df = c(4, 15, 19)
ss = c(SSTr, SSE, SST)
ms = c(MSTr, MSE, MST)
f_ = c(as.character(f), '', '')
p_ = c(as.character(p), '', '')
aovtable = data.frame(source, ss, df,  ms, f_, p_)
kable(data.frame(source, ss, df,  ms, f_, p_))
kable(daovtable)
kable(aovtable)
c1 <- c(1/2, 1/2, -1/3, -1/3, -1/3)
C1 <- sampleMeans %*% c1
seC1 <- sqrt(MSE/n * sum(c1^2))
t1 <- C1 / seC1
pt(abs(t1), df = N-a, lower.tail = F) * 2
pt(abs(t1), df = N-a, lower.tail = F) * 2 < 0.05
args(qtukey)
q <- qtukey(0.05, nmeans = a, df = N-a, lower.tail = F)
HSD <- q * sqrt(MSE/n)
sampleMeans
3.1+HSD
contrasts <- matrix(c(1, 1, -1, -1,
1, -1, 1, -1,
1, -1, -1, 1), byrow = T, nrow =3)
contrasts
library(gmodels)
fit <- aov(mass ~ treatment, data = dat)
mass <- c(18.9, 18.8, 19.5, 21.3, 18.7, 19.2, 19.9, 21.1)
treatment <- factor(rep(1:4, times = 2))
dat <- data.frame(treatment, mass)
head(dat)
contrasts <- matrix(c(1, 1, -1, -1,
1, -1, 1, -1,
1, -1, -1, 1), byrow = T, nrow =3)
contrasts
library(gmodels)
fit <- aov(mass ~ treatment, data = dat)
contrasts <- matrix(c(1, 1, -1, -1,
1, -1, 1, -1,
1, -1, -1, 1), byrow = T, nrow =3)
fit.contrast(fit, "treatment", contrasts, conf.int = 0.95)
help("fit.contrast")
anova(fit)
dat %>% group_by(treatment) $>$ mean()
dat %>% group_by(treatment) %>% mean()
library(tidyverse)
dat %>% group_by(treatment) %>% mean()
dat %>% group_by(treatment) %>% mean()
dat %>% group_by(treatment) %>% summarize(means = mean(mass))
MSE = 0.05
te = dat %>% group_by(treatment) %>% summarize(means = mean(mass))
samplemeans = te[$means[[2]]
samplemeans = te[[2]]
samplemeans
MSE = 0.05
te = dat %>% group_by(treatment) %>% summarize(means = mean(mass))
samplemeans = te[[2]]
n =2
a = 4
N <- n*a  # total sample size
dfE <- N - a
dfTr <- a - 1
dfT <- N - 1
SSE <- dfE * MSE
c(dfE, dfTr, dfT, SSE)
SSTr <- n*sum((sampleMeans - mean(sampleMeans))^2)
MSTr <- SSTr / dfTr
SST <- SSTr + SSE
MST <- SST / dfT
c(SSTr, MSTr, SST, MST)
c1 <- c(1,1,-1,-1) # contrast coefficient
C1 <- sampleMeans %*% c1 # sum(c1_i * y_i bar)
seC1 <- sqrt(MSE/n * sum(c1^2))
t1 <- C1 / seC1
pt(abs(t1), df = N-a, lower.tail = F) * 2
t1
MSE = 0.05
te = dat %>% group_by(treatment) %>% summarize(means = mean(mass))
samplemeans = te[[2]]
n =2
a = 4
N <- n*a  # total sample size
dfE <- N - a
dfTr <- a - 1
dfT <- N - 1
SSE <- dfE * MSE
c(dfE, dfTr, dfT, SSE)
SSTr <- n*sum((sampleMeans - mean(sampleMeans))^2)
MSTr <- SSTr / dfTr
SST <- SSTr + SSE
MST <- SST / dfT
c(SSTr, MSTr, SST, MST)
c1 <- c(1,1,-1,-1) # contrast coefficient
C1 <- sampleMeans %*% c1 # sum(c1_i * y_i bar)
sampleMeans = te[[2]]
n =2
a = 4
N <- n*a  # total sample size
dfE <- N - a
dfTr <- a - 1
dfT <- N - 1
SSE <- dfE * MSE
c(dfE, dfTr, dfT, SSE)
SSTr <- n*sum((sampleMeans - mean(sampleMeans))^2)
MSTr <- SSTr / dfTr
SST <- SSTr + SSE
MST <- SST / dfT
c(SSTr, MSTr, SST, MST)
c1 <- c(1,1,-1,-1) # contrast coefficient
C1 <- sampleMeans %*% c1 # sum(c1_i * y_i bar)
seC1 <- sqrt(MSE/n * sum(c1^2))
t1 <- C1 / seC1
pt(abs(t1), df = N-a, lower.tail = F) * 2
(-2.222011 + 3.977989)/2
t1=(-2.222011 + 3.977989)/2
t1/seC1
pt(t1/seC1, dfE)
library(gmodels)
fit <- aov(mass ~ treatment, data = dat)
contrasts <- matrix(c(1, 1, -1, -1,
1, -1, 1, -1,
1, -1, -1, 1), byrow = T, nrow =3)
# fit.contrast(model, varname, coefficients, confidence level)
fit.contrast(fit, "treatment", contrasts, conf.int = 0.95)
library(gmodels)
fit <- aov(mass ~ treatment, data = dat)
# fit.contrast(model, varname, coefficients, confidence level)
fit.contrast(fit, "treatment", contrasts, conf.int = 0.95)
library(gmodels)
fit <- aov(mass ~ treatment, data = dat)
# fit.contrast(model, varname, coefficients, confidence level)
fit.contrast(fit, "treatment", contrasts, conf.int = 0.95)
fit.contrast(fit, "treatment", matrix(c(1, 1, -1, -1,
1, -1, 1, -1,
1, 1, 1, -3), byrow = T, nrow =3), conf.int = 0.95)
library(gmodels)
fit <- aov(mass ~ treatment, data = dat)
# fit.contrast(model, varname, coefficients, confidence level)
fit.contrast(fit, "treatment", contrasts, conf.int = 0.95)
fit.contrast(fit, "treatment", matrix(c(1, 1, -1, -1), byrow = T, nrow =1), conf.int = 0.95)
knitr::opts_chunk$set(echo = TRUE)
# parameters needed to be decided
taxonomy <- 'Genus'
save_path <- paste0('../data/derived_data/taxa_level/')
if(!dir.exists(save_path)){dir.create(save_path)}
save_path_para <- paste0(save_path, 'lm_parameter', taxonomy,'.csv')
save_path_joined <- paste0(save_path, 'joined_data_', taxonomy,'.csv') # where we save the jointed data
metadata <- read.csv('../data/derived_data/metadata/cleaned_data_no_replicate.csv')
count_mtx <- read.csv(paste0('../data/derived_data/seq_count_mtx/',taxonomy, '_asv.csv'))
table(metadata$group, metadata$timepoint)
dat <- dplyr::full_join(metadata, count_mtx, by = c('subject', 'timepoint')) %>%
dplyr::mutate(trt = ifelse( ((group == 'MBRT') & (timepoint == 2)), yes = 1, no = 0))
library(dplyr)
library(ggplot2)
library(viridis)
dat <- dplyr::full_join(metadata, count_mtx, by = c('subject', 'timepoint')) %>%
dplyr::mutate(trt = ifelse( ((group == 'MBRT') & (timepoint == 2)), yes = 1, no = 0))
write.csv(dat,save_path_joined, row.names = FALSE)
unique_tax <- count_mtx %>%
select(-c(X, subject, timepoint)) %>%
names()
desired_statistic <- c('intercept','beta_trt','beta_anx', 't_intercept','t_trt', 't_anx', 'p_intercept','p_trt', 'p_anx', 'F_stat', 'p_F','df1', 'df2', 'MSE')
reg_stat <- data.frame(matrix(nrow = length(unique_tax), ncol = length(desired_statistic)))
names(reg_stat) <- desired_statistic
reg_stat[, taxonomy] <- unique_tax
t
t = unique_tax[1]
t
reg_stat[t, taxonomy]
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx))
sub_dat[,t] = dat[,t] +1#scale(dat[,t])
mod <- lm(log(get(t)) ~ trt + promis_anx, data = sub_dat)
reg_stat[t, taxonomy] <- t
reg_stat[t, taxonomy]
colnames(reg_stat)
rownames(reg_stat)
unique_tax <- count_mtx %>%
select(-c(X, subject, timepoint)) %>%
names()
desired_statistic <- c('intercept','beta_trt','beta_anx', 't_intercept','t_trt', 't_anx', 'p_intercept','p_trt', 'p_anx', 'F_stat', 'p_F','df1', 'df2', 'MSE')
reg_stat <- data.frame(matrix(nrow = length(unique_tax), ncol = length(desired_statistic)))
names(reg_stat) <- desired_statistic
reg_stat[, taxonomy] <- unique_tax
for (t in unique_tax) {
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx))
sub_dat[,t] = dat[,t] +1#scale(dat[,t])
mod <- lm(log(get(t)) ~ trt + promis_anx, data = sub_dat)
reg_stat[t, taxonomy] <- t
reg_stat[t, c('intercept','beta_trt', 'beta_anx')] <- coef(mod) %>% unlist
reg_stat[t, c('F_stat','df1','df2')] <- summary(mod)$fstatistic %>% unlist
reg_stat[t, c('t_intercept','t_trt', 't_anx')] <- summary(mod)$coefficients[,'t value']
reg_stat[t, c('p_intercept','p_trt', 'p_anx')] <- summary(mod)$coefficients[,'Pr(>|t|)']
reg_stat[t, 'MSE'] <- sum(summary(mod)$residuals ^2) / (nrow(sub_dat) - 1)
reg_stat[t, 'p_F'] <- pf( reg_stat[t, 'F_stat'] , reg_stat[t, 'df1'], reg_stat[t, 'df2'], lower.tail = FALSE)
}
reg_stat <- reg_stat[ -c(1:length(unique_tax)),]
write.csv(reg_stat, file = save_path_para, row.names = FALSE)
library(dplyr)
library(ggplot2)
library(viridis)
library(dplyr)
library(ggplot2)
library(viridis)
taxonomy <- 'Genus'
save_path <- paste0('../data/derived_data/taxa_level/')
if(!dir.exists(save_path)) {dir.create(save_path)}
save_path_para <- paste0(save_path, 'lm_parameter', taxonomy,'.csv') # where the regression statistics are saved
save_path_joined <- paste0(save_path, 'joined_data_', taxonomy,'.csv') # where the jointed data are saved
# read data
metadata <- read.csv('../data/derived_data/metadata/cleaned_data_no_replicate.csv')
count_mtx <- read.csv(paste0('../data/derived_data/seq_count_mtx/',taxonomy, '_asv.csv'))
# join data
dat <- dplyr::full_join(metadata, count_mtx, by = c('subject', 'timepoint')) %>%
dplyr::mutate(trt = ifelse( ((group == 'MBRT') & (timepoint == 2)), yes = 1, no = 0))
write.csv(dat,save_path_joined, row.names = FALSE)
unique_tax <- count_mtx %>%
select(-c(X, subject, timepoint)) %>%
names()
desired_statistic <- c('intercept','beta_trt','beta_anx', 't_intercept','t_trt', 't_anx', 'p_intercept','p_trt', 'p_anx', 'F_stat', 'p_F','df1', 'df2', 'MSE')
reg_stat <- data.frame(matrix(nrow = length(unique_tax), ncol = length(desired_statistic)))
names(reg_stat) <- desired_statistic
reg_stat[, taxonomy] <- unique_tax
tem1 = reg_stat
t = unique_tax[1]
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx))
sub_dat[,t] = dat[,t] +1#scale(dat[,t])
mod <- lm(log(get(t)) ~ trt + promis_anx, data = sub_dat)
reg_stat[t, taxonomy] <- t
identical(t1, reg_stat)
identical(tem1, reg_stat)
length(tem1)
length(tem1)
identical(tem1[1:14], reg_stat[1:14])
View(tem1)
View(reg_stat)
tem1
dim(tem1)
tem[1:14]=1
s1 = 1
for (i in 1:128){
for (j in 1:15){
tem1[i,j] = s1
s1 = s1 + 1
}
}
tem1[t, taxonomy]
t
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx))
sub_dat[,t] = dat[,t] +1#scale(dat[,t])
mod <- lm(log(get(t)) ~ trt + promis_anx, data = sub_dat)
reg_stat[t, taxonomy] <- t
reg_stat[t, taxonomy] <- t
t = unique_tax[2]
reg_stat[t, taxonomy] <- t
reg_stat[, taxonomy] <- unique_tax
unique_tax <- count_mtx %>%
select(-c(X, subject, timepoint)) %>%
names()
desired_statistic <- c('intercept','beta_trt','beta_anx', 't_intercept','t_trt', 't_anx', 'p_intercept','p_trt', 'p_anx', 'F_stat', 'p_F','df1', 'df2', 'MSE')
reg_stat <- data.frame(matrix(nrow = length(unique_tax), ncol = length(desired_statistic)))
names(reg_stat) <- desired_statistic
reg_stat[, taxonomy] <- unique_tax
for (t in unique_tax) {
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx))
sub_dat[,t] = dat[,t] +1#scale(dat[,t])
mod <- lm(log(get(t)) ~ trt + promis_anx, data = sub_dat)
reg_stat[t, taxonomy] <- t
reg_stat[t, c('intercept','beta_trt', 'beta_anx')] <- coef(mod) %>% unlist
reg_stat[t, c('F_stat','df1','df2')] <- summary(mod)$fstatistic %>% unlist
reg_stat[t, c('t_intercept','t_trt', 't_anx')] <- summary(mod)$coefficients[,'t value']
reg_stat[t, c('p_intercept','p_trt', 'p_anx')] <- summary(mod)$coefficients[,'Pr(>|t|)']
reg_stat[t, 'MSE'] <- sum(summary(mod)$residuals ^2) / (nrow(sub_dat) - 1)
reg_stat[t, 'p_F'] <- pf( reg_stat[t, 'F_stat'] , reg_stat[t, 'df1'], reg_stat[t, 'df2'], lower.tail = FALSE)
}
reg_stat <- reg_stat[ -c(1:length(unique_tax)),]
write.csv(reg_stat, file = save_path_para, row.names = FALSE)
unique_tax <- count_mtx %>%
select(-c(X, subject, timepoint)) %>%
names()
desired_statistic <- c('intercept','beta_trt','beta_anx', 't_intercept','t_trt', 't_anx', 'p_intercept','p_trt', 'p_anx', 'F_stat', 'p_F','df1', 'df2', 'MSE')
reg_stat <- data.frame(matrix(nrow = length(unique_tax), ncol = length(desired_statistic)))
names(reg_stat) <- desired_statistic
reg_stat[, taxonomy] <- unique_tax
for (t in unique_tax) {
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx))
sub_dat[,t] = dat[,t] +1#scale(dat[,t])
mod <- lm(log(get(t)) ~ trt + promis_anx, data = sub_dat)
reg_stat[t, taxonomy] <- t
reg_stat[t, c('intercept','beta_trt', 'beta_anx')] <- coef(mod) %>% unlist
reg_stat[t, c('F_stat','df1','df2')] <- summary(mod)$fstatistic %>% unlist
reg_stat[t, c('t_intercept','t_trt', 't_anx')] <- summary(mod)$coefficients[,'t value']
reg_stat[t, c('p_intercept','p_trt', 'p_anx')] <- summary(mod)$coefficients[,'Pr(>|t|)']
reg_stat[t, 'MSE'] <- sum(summary(mod)$residuals ^2) / (nrow(sub_dat) - 1)
reg_stat[t, 'p_F'] <- pf( reg_stat[t, 'F_stat'] , reg_stat[t, 'df1'], reg_stat[t, 'df2'], lower.tail = FALSE)
}
reg_stat <- reg_stat[ -c(1:length(unique_tax)),]
tem1 = reg_stat
unique_tax <- count_mtx %>%
select(-c(X, subject, timepoint)) %>%
names() # names of elements under chosen taxonomy
desired_statistic <- c('intercept','beta_trt','beta_anx', 't_intercept','t_trt', 't_anx', 'p_intercept','p_trt', 'p_anx', 'F_stat', 'p_F','df1', 'df2', 'MSE')
reg_stat <- data.frame(matrix(nrow = length(unique_tax), ncol = length(desired_statistic)))
names(reg_stat) <- desired_statistic
rownames(reg_stat) <- unique_tax
reg_stat[, taxonomy] <- unique_tax
for (t in unique_tax) {
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx))
sub_dat[,t] = dat[,t] +1#scale(dat[,t])
mod <- lm(log(get(t)) ~ trt + promis_anx, data = sub_dat)
reg_stat[t, taxonomy] <- t
reg_stat[t, c('intercept','beta_trt', 'beta_anx')] <- coef(mod) %>% unlist
reg_stat[t, c('F_stat','df1','df2')] <- summary(mod)$fstatistic %>% unlist
reg_stat[t, c('t_intercept','t_trt', 't_anx')] <- summary(mod)$coefficients[,'t value']
reg_stat[t, c('p_intercept','p_trt', 'p_anx')] <- summary(mod)$coefficients[,'Pr(>|t|)']
reg_stat[t, 'MSE'] <- sum(summary(mod)$residuals ^2) / (nrow(sub_dat) - 1)
reg_stat[t, 'p_F'] <- pf( reg_stat[t, 'F_stat'] , reg_stat[t, 'df1'], reg_stat[t, 'df2'], lower.tail = FALSE)
}
#reg_stat <- reg_stat[ -c(1:length(unique_tax)),]
#write.csv(reg_stat, file = save_path_para, row.names = FALSE)
identical(tem1, reg_stat)
t = unique_tax[2]
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx))
sub_dat[,t] = dat[,t] +1#scale(dat[,t])
mod <- lm(log(get(t)) ~ trt + promis_anx, data = sub_dat)
names(mode)
names(mod)
mod$coefficients
class(mod$coefficients)
coef(mod) %>% unlist
identical(coef(mod) %>% unlist, mod$coefficients)
paste0(c("a","b"), 1:3)
knitr::opts_chunk$set(echo = TRUE)
taxonomy <- 'Genus'
features <- "promis_anx" # can be a vector
var_names <- c('intercept', "trt", features)
stat_names <- c("beta", "t", "p")
apply(expand.grid(var_names, stat_names), 1, paste, collapse="_")
names(dat)
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx), age = dat$age)
t = unique_tax[2]
sub_dat <- data.frame(trt = dat$trt,
promis_anx = scale(dat$promis_anx), age = dat$age)
sub_dat[,t] = dat[,t] +1#scale(dat[,t])
View(sub_dat)
View(sub_dat)
seted("./Documents/GitHUb/sPMM/Normal")
setwd("./Documents/GitHUb/sPMM/Normal")
setwd("./membership_analysis/res")
paste(c("balanced", "unbalanced"), 1:10, sep = "_")
for (i in paste(c("balanced", "unbalanced"), 1:81, sep = "_")) dir.create(i)
for (i in paste(rep(c("balanced", "unbalanced"), each = 81), 1:81, sep = "_")) dir.create(i)
